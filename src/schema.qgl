# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Channel {
  name: String!
  uuid: ID!
}

input ChannelInput {
  name: String!
  planetId: String!
}

type CombineRequest {
  planets: [Request!]!
  users: [Request!]!
}

type CreatedRequest {
  request: Request!
  type: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type LoginResponseType {
  accessToken: String!
}

type Message {
  author: User!
  content: String!
  createdAt: DateTime!
  recipient: String!
  uuid: ID!
}

input MessageInput {
  content: String!
  recipient: String!
  toChannel: Boolean!
}

type Mutation {
  createChannel(channel: ChannelInput!): Channel!
  createPlanet(planet: PlanetInput!): Planet!
  createRequest(request: RequestInput!): Boolean!
  deleteNotification(notificationUuids: [String!]!): [String!]!
  deletePlanet(planetUuid: String!): Boolean!
  login(login: LoginInput!): LoginResponseType!
  logout: Boolean!
  notificationsViewed(notificationUuids: [String!]!): [String!]!
  register(user: RegisterInput!): User!
  requestsViewed(requestUuids: [String!]!): [String!]!
  resolveRequest(rejected: Boolean!, requestUuid: String!): String!
  sendMessage(message: MessageInput!): Message!
  updatePassword(new: String!, old: String!): Boolean!
  updatePlanet(planet: UpdatePlanetInput!, planetUuid: String!): Planet!
  updateUser(userInput: UserInput!): User!
}

type Notification {
  createdAt: DateTime!
  planet: Planet!
  rejected: Boolean!
  uuid: ID!
  viewed: Boolean!
}

type Planet {
  bio: String!
  channels: [Channel!]!
  createdAt: Float!
  imageUrl: String!
  isPublic: Boolean!
  name: String!
  requirements: String!
  topics: String!
  users: [PlanetsUser!]!
  uuid: ID!
}

input PlanetInput {
  bio: String!
  image: Upload
  isPublic: Boolean!
  name: String!
  requirements: String!
  topics: String!
}

type PlanetsUser {
  role: String!
  user: User!
}

type Query {
  getMessages(query: QueryMessageInput!): [Message!]!
  getMyPlanets: [Planet!]!
  getNotifications: [Notification!]!
  getPlanet(planetUuid: String!): Planet!
  getPlanetAuth(planetUuid: String!): Planet!
  getRequests: CombineRequest!
  getUser(username: String!): User!
  me: User!
  planets: [Planet!]!
  queryPlanets(query: QueryPlanetInput!): [Planet!]!
  refreshToken: LoginResponseType!
  users: [User!]!
}

input QueryMessageInput {
  recipient: String!
  toChannel: Boolean!
}

input QueryPlanetInput {
  limit: Float
  order: String!
}

input RegisterInput {
  email: String!
  password: String!
  username: String!
}

type Request {
  content: String
  createdAt: DateTime!
  planet: Planet!
  user: User!
  uuid: ID!
  viewed: Boolean!
}

input RequestInput {
  content: String
  planetUuid: String!
}

type Subscription {
  notificationCreated: Notification!
  requestCreated: CreatedRequest!
}

input UpdatePlanetInput {
  bio: String
  image: Upload
  isPublic: Boolean
  requirements: String
  topics: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  bio: String
  createdAt: Float!
  email: String!
  imageUrl: String!
  planets: [UsersPlanet!]!
  topics: String
  username: String!
  uuid: ID!
}

input UserInput {
  bio: String
  email: String
  image: Upload
  topics: String
  username: String
}

type UsersPlanet {
  planet: Planet!
  role: String!
}